generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String
  createdAt DateTime  @default(now())
  products  Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  phoneNumber String
  address     String
  createdAt   DateTime @default(now())
  orders      Order[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Discount {
  id               Int             @id @default(autoincrement())
  name             String
  description      String?
  discountType     DiscountType
  value            Float
  startDate        DateTime
  endDate          DateTime
  productVariantId Int?
  createdAt        DateTime        @default(now())
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([productVariantId])
}

model Order {
  id          Int         @id @default(autoincrement())
  totalAmount Float       @default(0)
  status      OrderStatus @default(Pending)
  customerId  Int
  createdAt   DateTime    @default(now())
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@index([customerId])
}

model OrderItem {
  id               Int            @id @default(autoincrement())
  orderId          Int
  productVariantId Int
  quantity         Int
  amount           Float
  createdAt        DateTime       @default(now())
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productVariantId])
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  brandId         Int
  categoryId      Int
  description     String
  createdAt       DateTime         @default(now())
  brand           Brand            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productVariants ProductVariant[]

  @@index([brandId])
  @@index([categoryId])
}

model ProductVariant {
  id            Int            @id @default(autoincrement())
  productId     Int
  product       Product        @relation(fields: [productId], references: [id])
  color         String
  size          String         @default("0")
  price         Float
  orderItems    OrderItem[]
  discounts     Discount[]
  productImages ProductImage[]
}

model ProductImage {
  id               Int            @id @default(autoincrement())
  productVariantId Int
  imageUrl         String
  createdAt        DateTime       @default(now())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([productVariantId])
}

enum OrderStatus {
  Pending
  Delivery
  Completed
}

enum DiscountType {
  Active
  Expired
}
