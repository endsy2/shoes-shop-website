generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String
  createdAt DateTime  @default(now())
  product   product[]
}

model category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product product[]
}

model customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique(map: "Customer_email_key")
  password    String
  phoneNumber String
  address     String
  createdAt   DateTime @default(now())
  order       order[]
}

model admin {
  id       Int    @id @default(autoincrement())
  Email    String
  password String
}

model discount {
  id           Int                   @id @default(autoincrement())
  name         String
  description  String?
  discountType discount_discountType
  value        Float
  startDate    DateTime
  endDate      DateTime
  productId    Int?
  createdAt    DateTime              @default(now())
  product      product?              @relation(fields: [productId], references: [id], onDelete: Cascade, map: "Discount_productId_fkey")

  @@index([productId], map: "Discount_productId_fkey")
}

model order {
  id          Int          @id @default(autoincrement())
  totalAmount Float        @default(0)
  status      order_status @default(Pending)
  customerId  Int
  createdAt   DateTime     @default(now())
  customer    customer     @relation(fields: [customerId], references: [id], onDelete: Cascade, map: "Order_customerId_fkey")
  orderitem   orderitem[]

  @@index([customerId], map: "Order_customerId_fkey")
}

model orderitem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  amount    Float
  createdAt DateTime @default(now())
  order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderItem_orderId_fkey")
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "OrderItem_productId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model product {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  brandId         Int
  categoryID      Int
  createdAt       DateTime          @default(now())
  discount        discount[]
  orderitem       orderitem[]
  brand           brand             @relation(fields: [brandId], references: [id], onDelete: Cascade, map: "Product_brandId_fkey")
  productimage    productimage[]
  Description     String
  productVariants productVariants[]
  category        category          @relation(fields: [categoryID], references: [id], onDelete: Cascade, map: "Product_categoryId_fkey")

  @@index([brandId], map: "Product_brandId_fkey")
  @@index([categoryID], map: "Product_categoryId_fkey")
}

model productVariants {
  id         Int     @id @default(autoincrement())
  product_id Int
  product_fk product @relation(fields: [product_id], references: [id])
  color      String
  price      Float
}

model productimage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  createdAt DateTime @default(now())
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductImage_productId_fkey")

  @@index([productId], map: "ProductImage_productId_fkey")
}

enum order_status {
  Pending
  Delivery
  Completed
}

enum discount_discountType {
  active
  expired
}
